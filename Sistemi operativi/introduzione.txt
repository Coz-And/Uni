Chiamata di sistema [1. introduzione, 2.Differenze, 3.File]

[1.]
il meccanismo con cui i programmi, richiedono servizi al sistema operativo, é opportuno che esistano per gli stessi motivi per cui esiste il sistema operativo. é opportuno che esistano per gli stessi motivi per cui esiste il sistema operativo : 
  - l'uso dele risorse del sistema, specie i dispositivi : nasconderene i dettagli, spesso complessi, e dipendenti, dal singolo tipo di dispositivo
  - coordinare l'utilizzo delle risorse del sistema di elaborazione da parte di programmi contemporaneamnete in corso di esecuzione.

dal punto di vita della programmazione, Unix le chiamate di sistema sono disponibili : 
    1. Istruzioni aggiuntive alle istruzioni macchina
    2. Funzione C, la cui interfaccia é definita nello standard POSIX, in modo che i programmi sviluppati su uno Unix Girimp anche su un altro.
il codice delle funzioni é predefinito e comprende la corrispondente chiamata di sistema di tipo, useremo sempre le chiaate di tipo, cioè useremo la libreria di funzioni delle chiamate di sistema.
[2.]
Esistono altre librerie di funzioni, che non sono chiamate di sistema
"Attenzione alle differenze
1. le chiamate di un sistema che si confroma allo standard POSIX sono offertto da tutti gli Unix, ma non necessariamente da altri S.O, inotlre alcune librerie sono realizzate usando le chiamate di sistema.
2. L'esecuzione di una C.S. la CPU passa, con un piccolo ma a volte non trascurabile costo, a modalità Kernel. nella quale si possono fare cose che normalmente i programmi non possono fare, in questo modo a questi dati si accede soltanto usando le funzioni del sistema opeartivo
[3.]
il significato  delle operazioni richieste é relativamente facile da intuire, non strettamente necessario é molto più comodo usare la libreria standard del C per l'I/O piuttosto che le chiamate di sistema 
Unix gestisce, per ogni processo, una tabella dei file aperti, per default, un processo ha aperto 3 file corrispondenti agli elementi 0,1,2 della tabella : standard input, standard output, standard error.
Aprire un file = chiudere al S.O di utilizzarlo per una serie di operazioni di lettura / scrittura, in C su Unix

Operazioni : 
1. fd = open("Paperino",....)
2. creat("Paperino",....) crea il file(anche open lo fa con opportune opzioni)
3. read(fd,puntatore,n) legge n bytes dal file aperto identificato da fd, scritti in memoria a partire da puntatore
4. write(fd,puntatore,n) analoga

read e write oporano a partire dal punto in cui é arrivata l'ultima operazioni. Viene mantenuto un offset che indica il numero del byte a partire dal quale avverrà la prossima operazione, il fatto che non sia nella tabella dei file aperti del singolo processo ha la conseguenza 
di poter essere condiviso tra processi diversi.

Funzioni : 
1. open 
2. Read
3. Write
4. Close
5. lseek
6. dup, dup2
7. fopen
6. getc / getchar
7. scanf / fscanf
8. putc / putchar
9. printf / fprintf
10. fclose
11. fseek
12. freopen

Unbuffered I/O : apertura file - dettagli
int open(Const char * path, int oflag,.. /*mode_t mode*/)
- apre il file specificato nella stringa *path, restuisce in caso di successo, un intero.
- il file viene aperto secondo la modalità specificata tramite oflag : 
    -> O_RDONLY (File aperto in sola lettura)
    -> O_WRONLY (File aperto in sola scrittura)
    -> O_RDWR (File aperto in lettura e scrittura)
uno solo dei precedenti valori devono essere passati alla open, inoltre possono essere specificate ulteriori opzioni, il fiel specificato da path non esista e si é passato O_CREAT, il file viene creato con i permessi specificati da mode.
la dicitura /*mode_t mode*/ indica che mode é opzionale, quindi : 
 - int open(const char *path, int oflag) [non creo il file]
 - int open(const char *path, int oflag, mode_t mode) [devo crearlo]

Lettura/scrittura su file 
ssize_t read(int fd, void *buf, size_t nbytes)
    - leggo dal file con descrittore fd al più nbytes e li copio in buf
       buf deve puntare ad una zona di memoria allocata
    - Restituisce numero di byte letti, 0 se file terminato, -1 in caso di errore
ssize_t write (int fd, const void *buf, size_t nbytes)
    - Scrivo sul file con descrittore fd gli nbytes contenuti in buf
    - Restituisce numero di byte scritti, -1 in caso di errore
in entrambi i casi le operazioni iniziano a partire dall'offest del file, l'offset verrà poi incrementato del numero di byte letti/scritti
- int close(fd) [Quando un processo termina, tutti i suoi file aperti sono chiusi automaticaamente dal kernel]
- Restituisce 0 in caso di successo, -1 altrimenti

Errori
le chiamate di sistema possono dare errore per tanti motivi :
  - richiesta non ha senso 
  - mancano risorse per soddisfare la richiesta, o sono stati raggiunti i limiti fissati per l'utente o per un singolo processo
  - In caso di errore la chiamata ripicamente, restituisce il valore -1, inoltre viene valorizzata un variabile dal nome prefissato che individua quale errore si é verificato tra quelli elencati nel "man".
  - Dipende dai casi, ma come minimo stampare un messaggio di errore significativo, per questo si usa la funzione perror().

Argomenti sulla linea di comando
la funzione si definiscono con argomenti per fare eseguire lo stesso codice su valori diversi, lo stesso con i  programmi.
NB : "ls" qualcuno ne ha scritto il codice, e da qualche parte, c'è un file eseguibile con il nome "ls", cosi per quasi tutti i comandi di Unix.
lo stesso per il programma "pippo" che scriviamo e compiliamo noi, come si fa ad accedere alle stringhe che "possiamo" [pippo qui quo qualche].

Esempio : 

Main 
main (int argc, char *argv []) {
  /*qui argv[1], ... , argv[argc -1] /*Sono le stringhe passate come argomento*/
}

Generando l'eseguibile con nome "pippo", e scrivendo : argc=4 

 -------------------------
| Pippo | Qui | Quo | Qua |
 -------------------------
    0      1     2     3

Protezione dei file
File e directory, il sistema associa una serie di informazioni tra cui :
 * Nome del proprietario
 * Nome del grupppo di appartenenza
 * Tipo di file 
 * Dimensione
 * Permessi di accesso al file
 * Un indirizzo ai blocchi del disco su cui é memorizzato il contenuto del file
Permessi di accesso al file sono descritti da tre triple di attributi di protezione, ogni tripla consiste di tre Flag : 
 * Accesso in lettura, flag "r"
 * Accesso in scrittura, flag "w"
 * Accesso in esecuzione, flag "x"

il comando "ls - l" si possono ottenere diverse informazioni sui file, tra cui le informazioni sul tipo di file e le protezioni in corrispondenza della prima colonna.

                                                                -rw-r--r--
                                                                drwxrwx--x
il primo elemento indica il tipo di file
1. -: file normale 
2. d: directory
3. c: file speciale a caratteri 
4. b: file speciale a blocchi

i rimanenti si riferiscono come dicevamo ai permessi associati al proprietario, al gruppo associato al proprietario e a tutti gli altri, il simbolo X, ha significato di "permesso di esecuzione" nel caso di file, di "permesso di attraversamento" nel caso di directory. 
se non si ha il promesso di attraversamento, non si può in alcun modo usare un file o una sottodirecotry al di sotto di essa.
comando chmod per cmabiare i permessi ai file.

Unbuffered I/O: Apertura file-permessi 
si può passare a mode i valori della tabella sottostante pagina 23